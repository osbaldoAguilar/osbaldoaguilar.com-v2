{"mappings":"AAAA,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAS;AAE9C,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAQ;AAC9C,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC,CAAI;AAExC,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAO;AACjD,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,CAAI;AAEtC,KAAK,CAAC,YAAY,GAAG,GAAG,CAAC,MAAM,CAAC,YAAY;AAC5C,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,UAAU,EAAE,YAAY;AAEnD,EAAsD,AAAtD,oDAAsD;eAEvC,aAAa,GAAG,CAAC;IAC5B,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QACtD,KAAK,EAAE,CAAC;YAAC,KAAK,EAAE,IAAI;YAAE,MAAM,EAAE,GAAG;QAAC,CAAC;IACvC,CAAC;IACD,OAAO,CAAC,GAAG,CAAC,MAAM;IAClB,KAAK,CAAC,SAAS,GAAG,MAAM;IACxB,KAAK,CAAC,KAAK,CAAC,IAAI;IAChB,EAAoD,AAApD,kDAAoD;IACpD,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU;IACnC,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC,WAAW;IACrC,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC,UAAU;IACpC,KAAK,CAAC,YAAY,GAAI,KAAK,CAAC,WAAW;IACvC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY;AAClE,CAAC;eAEc,MAAM,GAAG,CAAC;IACrB,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK;IAC7C,OAAO,CAAC,GAAG,CAAC,KAAK;IACjB,EAAiF,AAAjF,+EAAiF;IACjF,qBAAqB,CAAC,MAAM;AAChC,CAAC;AACD,aAAa,GAAG,IAAI,CAAC,MAAM","sources":["testWebCam.js"],"sourcesContent":["const video = document.querySelector('.webcam');\n\nconst canvas = document.querySelector('.video');\nconst canvasCtx = canvas.getContext('2d');\n\nconst faceCanvas = document.querySelector('.face');\nconst faceCtx = canvas.getContext('2d');\n\nconst faceDetector = new window.FaceDetector();\nconsole.log(video, canvas, faceCanvas, faceDetector);\n\n// write a function that will populate the user video;\n\nasync function populateVideo() {\n    const stream = await navigator.mediaDevices.getUserMedia({\n        video: { width: 1280, height: 720 },\n    });\n    console.log(stream);\n    video.srcObject = stream;\n    await video.play();\n    // size the canvas to be the same size as the video \n    const videoWidth = video.videoWidth;\n    const videoHeight = video.videoHeight;\n    const canvasWidth = video.videoWidth;\n    const canvasHeight =  video.videoHeight;\n    console.log(videoWidth, videoHeight, canvasWidth, canvasHeight);\n}\n\nasync function detect() {\n    const faces = await faceDetector.detect(video);\n    console.log(faces);\n    // ask browser when the next animation frame is, and tell it to run detect for us\n    requestAnimationFrame(detect)\n}\npopulateVideo().then(detect);"],"names":[],"version":3,"file":"index.89bec93c.js.map","sourceRoot":"/__parcel_source_root/"}